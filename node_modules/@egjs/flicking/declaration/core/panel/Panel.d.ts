import Flicking from "../../Flicking";
import { ALIGN, DIRECTION } from "../../const/external";
import { LiteralUnion, ValueOf } from "../../type/internal";
export interface PanelOptions {
    index: number;
    align: LiteralUnion<ValueOf<typeof ALIGN>> | number;
    flicking: Flicking;
}
declare abstract class Panel {
    protected _flicking: Flicking;
    protected _index: number;
    protected _pos: number;
    protected _size: number;
    protected _height: number;
    protected _margin: {
        prev: number;
        next: number;
    };
    protected _alignPos: number;
    protected _removed: boolean;
    protected _toggleDirection: ValueOf<typeof DIRECTION>;
    protected _toggled: boolean;
    protected _togglePosition: number;
    protected _align: PanelOptions["align"];
    abstract get element(): HTMLElement;
    get index(): number;
    get position(): number;
    get size(): number;
    get sizeIncludingMargin(): number;
    get height(): number;
    get margin(): {
        prev: number;
        next: number;
    };
    get alignPosition(): number;
    get removed(): boolean;
    abstract get rendered(): any;
    get range(): {
        min: number;
        max: number;
    };
    get toggled(): boolean;
    get toggleDirection(): any;
    get offset(): number;
    get progress(): number;
    get outsetProgress(): number;
    get visibleRatio(): number;
    get align(): PanelOptions["align"];
    set align(val: PanelOptions["align"]);
    constructor({ index, align, flicking }: PanelOptions);
    abstract markForShow(): any;
    abstract markForHide(): any;
    resize(): this;
    contains(element: HTMLElement): boolean;
    destroy(): void;
    includePosition(pos: number, includeMargin?: boolean): boolean;
    includeRange(min: number, max: number, includeMargin?: boolean): boolean;
    focus(duration?: number): Promise<void>;
    prev(): Panel | null;
    next(): Panel | null;
    increaseIndex(val: number): this;
    decreaseIndex(val: number): this;
    increasePosition(val: number): this;
    decreasePosition(val: number): this;
    toggle(prevPos: number, newPos: number): boolean;
    updateCircularToggleDirection(): this;
    private _moveBy;
    private _updateAlignPos;
    private _resetInternalStates;
}
export default Panel;
