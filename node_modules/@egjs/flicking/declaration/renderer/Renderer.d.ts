import Flicking, { FlickingOptions } from "../Flicking";
import Panel, { PanelOptions } from "../core/panel/Panel";
import RenderingStrategy from "./RenderingStrategy/RenderingStrategy";
export interface RendererOptions {
    align: FlickingOptions["align"];
    strategy: RenderingStrategy;
}
declare abstract class Renderer {
    protected _flicking: Flicking | null;
    protected _panels: Panel[];
    protected _renderingStrategy: RenderingStrategy;
    protected _align: RendererOptions["align"];
    get panels(): Panel[];
    get panelCount(): number;
    get align(): RendererOptions["align"];
    set align(val: RendererOptions["align"]);
    constructor({ align, strategy }?: Partial<RendererOptions>);
    abstract render(): Promise<void>;
    abstract forceRenderAllPanels(): Promise<void>;
    protected abstract _collectPanels(): void;
    protected abstract _createPanel(el: any, options: PanelOptions): Panel;
    protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;
    protected abstract _removePanelElements(panels: Panel[]): void;
    init(flicking: Flicking): this;
    destroy(): void;
    getPanel(index: number): Panel | null;
    updatePanelSize(): this;
    batchInsert(...items: Array<{
        index: number;
        elements: any[];
    }>): Panel[];
    batchRemove(...items: Array<{
        index: number;
        deleteCount: number;
    }>): Panel[];
    protected _getPanelAlign(): string | number;
    protected _getPanelSizeSum(panels: Panel[]): number;
    protected _updateCameraAndControl(): void;
}
export default Renderer;
